commit 0d2344ef77fc4634b8e6bca6c1d7731c92291f8e
Author: Matthew Denton <mpdenton@chromium.org>
Date:   Tue Sep 14 21:54:54 2021 +0000

    Linux sandbox: Fix conflict between syscall broker and fstat() handler
    
    Recently glibc began rewriting fstat() calls to the seccomp-hostile
    fstatat(). The baseline policy is set up to handle fstatat() calls
    and rewrite them back to fstat(). However, when the syscall broker
    is in use (and has the COMMAND_STAT capability), it overrides the
    fstatat() handling with its own, which does not know how to rewrite
    glibc's fstatat() call back to fstat() and therefore fails with EPERM.
    
    Fix this in the seccomp policy by redirecting any fstatat() syscalls
    that use the AT_EMPTY_PATH flag to our "rewriter" instead of to the
    broker.
    
    Bug: 1243290
    Change-Id: Ia7f200583a58fff57e4370aeb83e1e2295121fb3
    Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/3156602
    Reviewed-by: Jorge Lucangeli Obes <jorgelo@chromium.org>
    Commit-Queue: Matthew Denton <mpdenton@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#921428}

Index: dev/sandbox/policy/linux/bpf_audio_policy_linux.cc
===================================================================
--- dev.orig/sandbox/policy/linux/bpf_audio_policy_linux.cc
+++ dev/sandbox/policy/linux/bpf_audio_policy_linux.cc
@@ -132,7 +132,7 @@ ResultExpr AudioProcessPolicy::EvaluateS
 
       auto* sandbox_linux = SandboxLinux::GetInstance();
       if (sandbox_linux->ShouldBrokerHandleSyscall(system_call_number))
-        return sandbox_linux->HandleViaBroker();
+        return sandbox_linux->HandleViaBroker(system_call_number);
 
       return BPFBasePolicy::EvaluateSyscall(system_call_number);
   }
Index: dev/sandbox/policy/linux/bpf_gpu_policy_linux.cc
===================================================================
--- dev.orig/sandbox/policy/linux/bpf_gpu_policy_linux.cc
+++ dev/sandbox/policy/linux/bpf_gpu_policy_linux.cc
@@ -102,7 +102,7 @@ ResultExpr GpuProcessPolicy::EvaluateSys
 
   auto* sandbox_linux = SandboxLinux::GetInstance();
   if (sandbox_linux->ShouldBrokerHandleSyscall(sysno))
-    return sandbox_linux->HandleViaBroker();
+    return sandbox_linux->HandleViaBroker(sysno);
 
   // Default on the baseline policy.
   return BPFBasePolicy::EvaluateSyscall(sysno);
Index: dev/sandbox/policy/linux/bpf_ime_policy_linux.cc
===================================================================
--- dev.orig/sandbox/policy/linux/bpf_ime_policy_linux.cc
+++ dev/sandbox/policy/linux/bpf_ime_policy_linux.cc
@@ -45,7 +45,7 @@ ResultExpr ImeProcessPolicy::EvaluateSys
     default:
       auto* sandbox_linux = SandboxLinux::GetInstance();
       if (sandbox_linux->ShouldBrokerHandleSyscall(sysno))
-        return sandbox_linux->HandleViaBroker();
+        return sandbox_linux->HandleViaBroker(sysno);
 
       return BPFBasePolicy::EvaluateSyscall(sysno);
   }
Index: dev/sandbox/policy/linux/bpf_libassistant_policy_linux.cc
===================================================================
--- dev.orig/sandbox/policy/linux/bpf_libassistant_policy_linux.cc
+++ dev/sandbox/policy/linux/bpf_libassistant_policy_linux.cc
@@ -37,7 +37,7 @@ ResultExpr LibassistantProcessPolicy::Ev
     default:
       auto* sandbox_linux = SandboxLinux::GetInstance();
       if (sandbox_linux->ShouldBrokerHandleSyscall(sysno))
-        return sandbox_linux->HandleViaBroker();
+        return sandbox_linux->HandleViaBroker(sysno);
 
       return BPFBasePolicy::EvaluateSyscall(sysno);
   }
Index: dev/sandbox/policy/linux/bpf_network_policy_linux.cc
===================================================================
--- dev.orig/sandbox/policy/linux/bpf_network_policy_linux.cc
+++ dev/sandbox/policy/linux/bpf_network_policy_linux.cc
@@ -35,7 +35,7 @@ NetworkProcessPolicy::~NetworkProcessPol
 ResultExpr NetworkProcessPolicy::EvaluateSyscall(int sysno) const {
   auto* sandbox_linux = SandboxLinux::GetInstance();
   if (sandbox_linux->ShouldBrokerHandleSyscall(sysno))
-    return sandbox_linux->HandleViaBroker();
+    return sandbox_linux->HandleViaBroker(sysno);
 
   // TODO(mpdenton): FIX this.
   return Allow();
Index: dev/sandbox/policy/linux/bpf_speech_recognition_policy_linux.cc
===================================================================
--- dev.orig/sandbox/policy/linux/bpf_speech_recognition_policy_linux.cc
+++ dev/sandbox/policy/linux/bpf_speech_recognition_policy_linux.cc
@@ -40,7 +40,7 @@ ResultExpr SpeechRecognitionProcessPolic
     default:
       auto* sandbox_linux = SandboxLinux::GetInstance();
       if (sandbox_linux->ShouldBrokerHandleSyscall(system_call_number))
-        return sandbox_linux->HandleViaBroker();
+        return sandbox_linux->HandleViaBroker(system_call_number);
 
       // Default on the content baseline policy.
       return BPFBasePolicy::EvaluateSyscall(system_call_number);
Index: dev/sandbox/policy/linux/bpf_tts_policy_linux.cc
===================================================================
--- dev.orig/sandbox/policy/linux/bpf_tts_policy_linux.cc
+++ dev/sandbox/policy/linux/bpf_tts_policy_linux.cc
@@ -36,7 +36,7 @@ ResultExpr TtsProcessPolicy::EvaluateSys
 
   auto* sandbox_linux = SandboxLinux::GetInstance();
   if (sandbox_linux->ShouldBrokerHandleSyscall(sysno))
-    return sandbox_linux->HandleViaBroker();
+    return sandbox_linux->HandleViaBroker(sysno);
 
   return BPFBasePolicy::EvaluateSyscall(sysno);
 }
Index: dev/sandbox/policy/linux/sandbox_linux.cc
===================================================================
--- dev.orig/sandbox/policy/linux/sandbox_linux.cc
+++ dev/sandbox/policy/linux/sandbox_linux.cc
@@ -32,6 +32,7 @@
 #include "base/time/time.h"
 #include "build/build_config.h"
 #include "sandbox/constants.h"
+#include "sandbox/linux/seccomp-bpf-helpers/sigsys_handlers.h"
 #include "sandbox/linux/services/credentials.h"
 #include "sandbox/linux/services/libc_interceptor.h"
 #include "sandbox/linux/services/namespace_sandbox.h"
@@ -43,6 +44,7 @@
 #include "sandbox/linux/syscall_broker/broker_client.h"
 #include "sandbox/linux/syscall_broker/broker_command.h"
 #include "sandbox/linux/syscall_broker/broker_process.h"
+#include "sandbox/linux/system_headers/linux_stat.h"
 #include "sandbox/policy/linux/bpf_broker_policy_linux.h"
 #include "sandbox/policy/linux/sandbox_seccomp_bpf_linux.h"
 #include "sandbox/policy/sandbox.h"
@@ -509,10 +511,23 @@ bool SandboxLinux::ShouldBrokerHandleSys
   return broker_process_->IsSyscallAllowed(sysno);
 }
 
-sandbox::bpf_dsl::ResultExpr SandboxLinux::HandleViaBroker() const {
-  return sandbox::bpf_dsl::Trap(
-      sandbox::syscall_broker::BrokerClient::SIGSYS_Handler,
-      broker_process_->GetBrokerClientSignalBased());
+bpf_dsl::ResultExpr SandboxLinux::HandleViaBroker(int sysno) const {
+  const bpf_dsl::ResultExpr handle_via_broker =
+      bpf_dsl::Trap(syscall_broker::BrokerClient::SIGSYS_Handler,
+                    broker_process_->GetBrokerClientSignalBased());
+  if (sysno == __NR_fstatat_default) {
+    // This may be an fstatat(fd, "", stat_buf, AT_EMPTY_PATH), which should be
+    // rewritten as fstat(fd, stat_buf). This should be consistent with how the
+    // baseline policy handles fstatat().
+    // Note that this will cause some legitimate but strange invocations of
+    // fstatat() to fail, see https://crbug.com/1243290#c8 for details.
+    const bpf_dsl::Arg<int> flags(3);
+    return bpf_dsl::If((flags & AT_EMPTY_PATH) == AT_EMPTY_PATH,
+                       RewriteFstatatSIGSYS(BPFBasePolicy::GetFSDeniedErrno()))
+        .Else(handle_via_broker);
+  } else {
+    return handle_via_broker;
+  }
 }
 
 bool SandboxLinux::HasOpenDirectories() const {
Index: dev/sandbox/policy/linux/sandbox_linux.h
===================================================================
--- dev.orig/sandbox/policy/linux/sandbox_linux.h
+++ dev/sandbox/policy/linux/sandbox_linux.h
@@ -242,7 +242,7 @@ class SANDBOX_POLICY_EXPORT SandboxLinux
   // handled transparently by the broker process. This is useful for file
   // syscalls that take pathnames, so we can enforce pathname whitelisting.
   // Only usable if StartBrokerProcess() was already called.
-  bpf_dsl::ResultExpr HandleViaBroker() const;
+  bpf_dsl::ResultExpr HandleViaBroker(int sysno) const;
 
  private:
   friend struct base::DefaultSingletonTraits<SandboxLinux>;
