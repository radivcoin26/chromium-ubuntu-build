Index: dev/third_party/blink/renderer/bindings/scripts/bind_gen/style_format.py
===================================================================
--- dev.orig/third_party/blink/renderer/bindings/scripts/bind_gen/style_format.py
+++ dev/third_party/blink/renderer/bindings/scripts/bind_gen/style_format.py
@@ -70,20 +70,10 @@ def gn_format(contents, filename=None):
 
 
 def _invoke_format_command(command_line, filename, contents):
-    kwargs = {}
-    if sys.version_info.major != 2:
-        kwargs['encoding'] = 'utf-8'
-    proc = subprocess.Popen(command_line,
-                            stdin=subprocess.PIPE,
-                            stdout=subprocess.PIPE,
-                            **kwargs)
-    stdout_output, stderr_output = proc.communicate(input=contents)
-    exit_code = proc.wait()
-
     return StyleFormatResult(
-        stdout_output=stdout_output,
-        stderr_output=stderr_output,
-        exit_code=exit_code,
+        stdout_output=contents,
+        stderr_output="",
+        exit_code=0,
         filename=filename)
 
 
Index: dev/third_party/devtools-frontend/src/scripts/devtools_paths.py
===================================================================
--- dev.orig/third_party/devtools-frontend/src/scripts/devtools_paths.py
+++ dev/third_party/devtools-frontend/src/scripts/devtools_paths.py
@@ -37,13 +37,10 @@ def third_party_path():
 
 # This points to the node binary downloaded as part of the checkout.
 def node_path():
-    try:
-        old_sys_path = sys.path[:]
-        sys.path.append(path.join(third_party_path(), 'node'))
-        import node
-    finally:
-        sys.path = old_sys_path
-    return node.GetBinaryPath()
+    if path.exists("/usr/lib/nodejs-mozilla/bin/node"):
+        return "/usr/lib/nodejs-mozilla/bin/node"
+    else:
+        return "/usr/bin/nodejs"
 
 
 def devtools_root_path():
Index: dev/third_party/node/node.py
===================================================================
--- dev.orig/third_party/node/node.py
+++ dev/third_party/node/node.py
@@ -11,6 +11,11 @@ import os
 
 
 def GetBinaryPath():
+  if platform.system() == 'Linux':
+    if os_path.exists("/usr/lib/nodejs-mozilla/bin/node"):
+      return "/usr/lib/nodejs-mozilla/bin/node"
+    else:
+      return "/usr/bin/nodejs"
   # TODO: Node 16.0 will likely ship with an official universal node binary
   # on macOS. Once node 16.0 is released, remove this special case here
   # and use node-darwin-universal in the dict in the main return statement.
Index: dev/tools/metrics/histograms/expand_owners.py
===================================================================
--- dev.orig/tools/metrics/histograms/expand_owners.py
+++ dev/tools/metrics/histograms/expand_owners.py
@@ -433,9 +433,7 @@ def ExpandHistogramsOWNERS(histograms):
 
       _UpdateHistogramOwners(histogram, owner, owners_to_add)
 
-      component = _ExtractComponentViaDirmd(os.path.dirname(path))
-      if not component:
-        component = _ExtractComponentFromOWNERS(path)
+      component = _ExtractComponentFromOWNERS(path)
       if component and component not in components_with_dom_elements:
         components_with_dom_elements.add(component)
         _AddHistogramComponent(histogram, component)
Index: dev/third_party/closure_compiler/compiler.py
===================================================================
--- dev.orig/third_party/closure_compiler/compiler.py
+++ dev/third_party/closure_compiler/compiler.py
@@ -13,8 +13,7 @@ import subprocess
 
 
 _CURRENT_DIR = os.path.join(os.path.dirname(__file__))
-_JAVA_PATH = os.path.join(_CURRENT_DIR, "..", "jdk", "current", "bin", "java")
-assert os.path.isfile(_JAVA_PATH), "java only allowed in android builds"
+_JAVA_PATH = "java"
 
 class Compiler(object):
   """Runs the Closure compiler on given source files to typecheck them
