Index: dev/media/gpu/vaapi/vaapi_mjpeg_decode_accelerator.cc
===================================================================
--- dev.orig/media/gpu/vaapi/vaapi_mjpeg_decode_accelerator.cc
+++ dev/media/gpu/vaapi/vaapi_mjpeg_decode_accelerator.cc
@@ -72,7 +72,7 @@ static bool VerifyDataSize(const VAImage
   const gfx::Size dimensions(base::strict_cast<int>(image->width),
                              base::strict_cast<int>(image->height));
   size_t min_size = 0;
-  if (image->format.fourcc == VA_FOURCC_I420) {
+  if (image->format.fourcc == VA_FOURCC('I', '4', '2', '0')) {
     min_size = VideoFrame::AllocationSize(PIXEL_FORMAT_I420, dimensions);
   } else if (image->format.fourcc == VA_FOURCC_NV12) {
     min_size = VideoFrame::AllocationSize(PIXEL_FORMAT_NV12, dimensions);
@@ -255,7 +255,7 @@ bool VaapiMjpegDecodeAccelerator::Output
   }
 
   switch (image->format.fourcc) {
-    case VA_FOURCC_I420:
+    case VA_FOURCC('I', '4', '2', '0'):
       DCHECK_EQ(image->num_planes, 3u);
       switch (video_frame->format()) {
         case PIXEL_FORMAT_I420:
Index: dev/media/gpu/vaapi/vaapi_video_encode_accelerator.h
===================================================================
--- dev.orig/media/gpu/vaapi/vaapi_video_encode_accelerator.h
+++ dev/media/gpu/vaapi/vaapi_video_encode_accelerator.h
@@ -52,7 +52,9 @@ class MEDIA_GPU_EXPORT VaapiVideoEncodeA
   friend class VaapiVideoEncodeAcceleratorTest;
   class H264Accelerator;
   class VP8Accelerator;
+#if VA_CHECK_VERSION(0, 39, 2)
   class VP9Accelerator;
+#endif
 
   // Encoder state.
   enum State {
Index: dev/media/gpu/vaapi/vaapi_video_encode_accelerator.cc
===================================================================
--- dev.orig/media/gpu/vaapi/vaapi_video_encode_accelerator.cc
+++ dev/media/gpu/vaapi/vaapi_video_encode_accelerator.cc
@@ -202,6 +202,7 @@ class VaapiVideoEncodeAccelerator::VP8Ac
   VaapiVideoEncodeAccelerator* const vea_;
 };
 
+#if VA_CHECK_VERSION(0, 39, 2)
 class VaapiVideoEncodeAccelerator::VP9Accelerator
     : public VP9Encoder::Accelerator {
  public:
@@ -223,6 +224,7 @@ class VaapiVideoEncodeAccelerator::VP9Ac
  private:
   VaapiVideoEncodeAccelerator* const vea_;
 };
+#endif
 
 VaapiVideoEncodeAccelerator::VaapiVideoEncodeAccelerator()
     : output_buffer_byte_size_(0),
@@ -377,6 +379,7 @@ void VaapiVideoEncodeAccelerator::Initia
       DCHECK_EQ(ave_config.bitrate_control,
                 AcceleratedVideoEncoder::BitrateControl::kConstantBitrate);
       break;
+#if VA_CHECK_VERSION(0, 39, 2)
     case kCodecVP9:
       if (!IsConfiguredForTesting()) {
         encoder_ = std::make_unique<VP9Encoder>(
@@ -385,6 +388,7 @@ void VaapiVideoEncodeAccelerator::Initia
       ave_config.bitrate_control = AcceleratedVideoEncoder::BitrateControl::
           kConstantQuantizationParameter;
       break;
+#endif
     default:
       NOTREACHED() << "Unsupported codec type " << GetCodecName(output_codec_);
       return;
@@ -1189,7 +1193,9 @@ bool VaapiVideoEncodeAccelerator::H264Ac
   rate_control_param.window_size = encode_params.cpb_window_size_ms;
   rate_control_param.initial_qp = pic_param.pic_init_qp;
   rate_control_param.min_qp = encode_params.scaling_settings.min_qp;
+#if VA_CHECK_VERSION(1, 1, 0)
   rate_control_param.max_qp = encode_params.scaling_settings.max_qp;
+#endif
   rate_control_param.rc_flags.bits.disable_frame_skip = true;
 
   VAEncMiscParameterFrameRate framerate_param = {};
@@ -1401,7 +1407,9 @@ bool VaapiVideoEncodeAccelerator::VP8Acc
   rate_control_param.window_size = encode_params.cpb_window_size_ms;
   rate_control_param.initial_qp = encode_params.initial_qp;
   rate_control_param.min_qp = encode_params.scaling_settings.min_qp;
+#if VA_CHECK_VERSION(1, 1, 0)
   rate_control_param.max_qp = encode_params.scaling_settings.max_qp;
+#endif
   rate_control_param.rc_flags.bits.disable_frame_skip = true;
 
   VAEncMiscParameterFrameRate framerate_param = {};
@@ -1444,6 +1452,7 @@ bool VaapiVideoEncodeAccelerator::VP8Acc
   return true;
 }
 
+#if VA_CHECK_VERSION(0, 39, 2)
 scoped_refptr<VP9Picture>
 VaapiVideoEncodeAccelerator::VP9Accelerator::GetPicture(
     AcceleratedVideoEncoder::EncodeJob* job) {
@@ -1585,5 +1594,6 @@ bool VaapiVideoEncodeAccelerator::VP9Acc
 
   return true;
 }
+#endif
 
 }  // namespace media
Index: dev/media/gpu/vaapi/vaapi_wrapper.cc
===================================================================
--- dev.orig/media/gpu/vaapi/vaapi_wrapper.cc
+++ dev/media/gpu/vaapi/vaapi_wrapper.cc
@@ -10,8 +10,10 @@
 #include <va/va.h>
 #include <va/va_drm.h>
 #include <va/va_drmcommon.h>
-#include <va/va_str.h>
 #include <va/va_version.h>
+#if VA_CHECK_VERSION(1, 0, 0)
+#include <va/va_str.h>
+#endif
 
 #include <algorithm>
 #include <string>
@@ -458,6 +460,62 @@ bool IsBlockedDriver(VaapiWrapper::Codec
   return false;
 }
 
+#if !VA_CHECK_VERSION(1, 0, 0)
+#define TOSTR(enumCase) case enumCase: return #enumCase
+
+const char *vaProfileStr(VAProfile profile)
+{
+  switch (profile) {
+    TOSTR(VAProfileNone);
+    TOSTR(VAProfileMPEG2Simple);
+    TOSTR(VAProfileMPEG2Main);
+    TOSTR(VAProfileMPEG4Simple);
+    TOSTR(VAProfileMPEG4AdvancedSimple);
+    TOSTR(VAProfileMPEG4Main);
+    TOSTR(VAProfileH264Baseline);
+    TOSTR(VAProfileH264Main);
+    TOSTR(VAProfileH264High);
+    TOSTR(VAProfileVC1Simple);
+    TOSTR(VAProfileVC1Main);
+    TOSTR(VAProfileVC1Advanced);
+    TOSTR(VAProfileH263Baseline);
+    TOSTR(VAProfileH264ConstrainedBaseline);
+    TOSTR(VAProfileJPEGBaseline);
+    TOSTR(VAProfileVP8Version0_3);
+    TOSTR(VAProfileH264MultiviewHigh);
+    TOSTR(VAProfileH264StereoHigh);
+    TOSTR(VAProfileHEVCMain);
+    TOSTR(VAProfileHEVCMain10);
+    TOSTR(VAProfileVP9Profile0);
+    TOSTR(VAProfileVP9Profile1);
+    TOSTR(VAProfileVP9Profile2);
+    TOSTR(VAProfileVP9Profile3);
+  }
+  return "<unknown profile>";
+}
+
+
+const char *vaEntrypointStr(VAEntrypoint entrypoint)
+{
+  switch (entrypoint) {
+    TOSTR(VAEntrypointVLD);
+    TOSTR(VAEntrypointIZZ);
+    TOSTR(VAEntrypointIDCT);
+    TOSTR(VAEntrypointMoComp);
+    TOSTR(VAEntrypointDeblocking);
+    TOSTR(VAEntrypointEncSlice);
+    TOSTR(VAEntrypointEncPicture);
+#if VA_CHECK_VERSION(0, 39, 1)
+    TOSTR(VAEntrypointEncSliceLP);
+#endif
+    TOSTR(VAEntrypointVideoProc);
+  }
+  return "<unknown entrypoint>";
+}
+
+#undef TOSTR
+#endif
+
 // This class is a wrapper around its |va_display_| (and its associated
 // |va_lock_|) to guarantee mutual exclusion and singleton behaviour.
 class VADisplayState {
@@ -746,10 +804,16 @@ std::vector<VAEntrypoint> GetEntryPoints
 #if BUILDFLAG(IS_CHROMEOS_ASH)
     {VAEntrypointVLD, VAEntrypointProtectedContent},  // kDecodeProtected.
 #endif
-    {VAEntrypointEncSlice, VAEntrypointEncPicture,
-     VAEntrypointEncSliceLP},  // kEncode.
-    {VAEntrypointEncSlice,
-     VAEntrypointEncSliceLP},  // kEncodeConstantQuantizationParameter.
+    {VAEntrypointEncSlice, VAEntrypointEncPicture
+#if VA_CHECK_VERSION(0, 39, 1)
+    , VAEntrypointEncSliceLP
+#endif
+    },  // kEncode.
+    {VAEntrypointEncSlice
+#if VA_CHECK_VERSION(0, 39, 1)
+    , VAEntrypointEncSliceLP
+#endif
+    },  // kEncodeConstantQuantizationParameter.
     {VAEntrypointVideoProc}    // kVideoProcess.
   };
   static_assert(base::size(kAllowedEntryPoints) == VaapiWrapper::kCodecModeMax,
@@ -859,8 +923,13 @@ bool AreAttribsSupported(const base::Loc
     if (attribs[i].type != required_attribs[i].type ||
         (attribs[i].value & required_attribs[i].value) !=
             required_attribs[i].value) {
+#if VA_CHECK_VERSION(1, 0, 0)
       VLOG(1) << "Unsupported value " << required_attribs[i].value << " for "
                << vaConfigAttribTypeStr(required_attribs[i].type);
+#else
+      VLOG(1) << "Unsupported value " << required_attribs[i].value << " for "
+               << required_attribs[i].type;
+#endif
       return false;
     }
   }
@@ -1136,8 +1205,10 @@ bool VASupportedProfiles::FillProfileInf
       continue;
     if (attrib.value & VA_RT_FORMAT_YUV420)
       profile_info->supported_internal_formats.yuv420 = true;
+#if VA_CHECK_VERSION(1, 2, 0)
     if (attrib.value & VA_RT_FORMAT_YUV420_10)
       profile_info->supported_internal_formats.yuv420_10 = true;
+#endif
     if (attrib.value & VA_RT_FORMAT_YUV422)
       profile_info->supported_internal_formats.yuv422 = true;
     if (attrib.value & VA_RT_FORMAT_YUV444)
@@ -1285,16 +1356,17 @@ bool VASupportedImageFormats::InitSuppor
     // Remove this workaround once b/128340287 is resolved.
     if (std::find_if(supported_formats_.cbegin(), supported_formats_.cend(),
                      [](const VAImageFormat& format) {
-                       return format.fourcc == VA_FOURCC_I420;
+                       return format.fourcc == VA_FOURCC('I', '4', '2', '0');
                      }) == supported_formats_.cend()) {
       VAImageFormat i420_format{};
-      i420_format.fourcc = VA_FOURCC_I420;
+      i420_format.fourcc = VA_FOURCC('I', '4', '2', '0');
       supported_formats_.push_back(i420_format);
     }
   }
   return true;
 }
 
+#if VA_CHECK_VERSION(0, 39, 1)
 bool IsLowPowerEncSupported(VAProfile va_profile) {
   constexpr VAProfile kSupportedLowPowerEncodeProfiles[] = {
       VAProfileH264ConstrainedBaseline,
@@ -1316,6 +1388,7 @@ bool IsLowPowerEncSupported(VAProfile va
   }
   return false;
 }
+#endif
 
 }  // namespace
 
@@ -1461,8 +1534,10 @@ bool VaapiWrapper::IsDecodingSupportedFo
   switch (rt_format) {
     case VA_RT_FORMAT_YUV420:
       return supported_internal_formats->yuv420;
+#if VA_CHECK_VERSION(1, 2, 0)
     case VA_RT_FORMAT_YUV420_10:
       return supported_internal_formats->yuv420_10;
+#endif
     case VA_RT_FORMAT_YUV422:
       return supported_internal_formats->yuv422;
     case VA_RT_FORMAT_YUV444:
@@ -1510,7 +1585,7 @@ bool VaapiWrapper::GetJpegDecodeSuitable
     // The VAAPI mesa state tracker only supports conversion from NV12 to YV12
     // and IYUV (synonym of I420).
     if (rt_format == VA_RT_FORMAT_YUV420) {
-      if (preferred_fourcc != VA_FOURCC_I420 &&
+      if (preferred_fourcc != VA_FOURCC('I', '4', '2', '0') &&
           preferred_fourcc != VA_FOURCC_YV12) {
         preferred_fourcc = VA_FOURCC_NV12;
       }
@@ -1540,7 +1615,7 @@ bool VaapiWrapper::GetJpegDecodeSuitable
     //
     if (preferred_fourcc == VA_FOURCC_422H ||
         preferred_fourcc == VA_FOURCC_P010) {
-      preferred_fourcc = VA_FOURCC_I420;
+      preferred_fourcc = VA_FOURCC('I', '4', '2', '0');
     }
   } else if (GetImplementationType() == VAImplementation::kIntelIHD) {
     // TODO(b/155939640): iHD v19.4 fails to allocate AYUV surfaces for the VPP
@@ -1548,16 +1623,16 @@ bool VaapiWrapper::GetJpegDecodeSuitable
     // (b/159896972): iHD v20.1.1 cannot create Y216 and Y416 images from a
     // decoded JPEG on gen 12. It is also failing to support Y800 format.
     if (preferred_fourcc == VA_FOURCC_AYUV ||
-        preferred_fourcc == VA_FOURCC_Y216 ||
-        preferred_fourcc == VA_FOURCC_Y416 ||
+        preferred_fourcc == VA_FOURCC('Y', '2', '1', '6') ||
+        preferred_fourcc == VA_FOURCC('Y', '4', '1', '6') ||
         preferred_fourcc == VA_FOURCC_Y800) {
-      preferred_fourcc = VA_FOURCC_I420;
+      preferred_fourcc = VA_FOURCC('I', '4', '2', '0');
     }
   }
 
   if (!VASupportedImageFormats::Get().IsImageFormatSupported(
           VAImageFormat{.fourcc = preferred_fourcc})) {
-    preferred_fourcc = VA_FOURCC_I420;
+    preferred_fourcc = VA_FOURCC('I', '4', '2', '0');
   }
 
   // After workarounds, assume the conversion is supported.
@@ -1660,8 +1735,10 @@ VAEntrypoint VaapiWrapper::GetDefaultVaE
       if (profile == VAProfileJPEGBaseline)
         return VAEntrypointEncPicture;
       DCHECK(IsModeEncoding(mode));
+#if VA_CHECK_VERSION(0, 39, 1)
       if (IsLowPowerEncSupported(profile))
         return VAEntrypointEncSliceLP;
+#endif
       return VAEntrypointEncSlice;
     case VaapiWrapper::kVideoProcess:
       return VAEntrypointVideoProc;
@@ -1899,7 +1976,11 @@ scoped_refptr<VASurface> VaapiWrapper::C
   }
   // We only have to pass the first file descriptor to a driver. A VA-API driver
   // shall create a VASurface from the single fd correctly.
+#if VA_CHECK_VERSION(1, 0, 0)
   uintptr_t fd = base::checked_cast<uintptr_t>(pixmap->GetDmaBufFd(0));
+#else
+  unsigned long fd = base::checked_cast<unsigned long>(pixmap->GetDmaBufFd(0));
+#endif
   va_attrib_extbuf.buffers = &fd;
   va_attrib_extbuf.num_buffers = 1u;
 
@@ -1991,6 +2072,7 @@ VaapiWrapper::ExportVASurfaceAsNativePix
     return nullptr;
   }
 
+#if VA_CHECK_VERSION(1, 0, 0)
   VADRMPRIMESurfaceDescriptor descriptor;
   {
     base::AutoLock auto_lock(*va_lock_);
@@ -2084,6 +2166,10 @@ VaapiWrapper::ExportVASurfaceAsNativePix
   exported_pixmap->pixmap = base::MakeRefCounted<gfx::NativePixmapDmaBuf>(
       scoped_va_surface.size(), buffer_format, std::move(handle));
   return exported_pixmap;
+#else
+  LOG(ERROR) << "Exporting a surface with FOURCC has been disabled";
+  return nullptr;
+#endif
 }
 
 bool VaapiWrapper::SyncSurface(VASurfaceID va_surface_id) {
@@ -2416,6 +2502,7 @@ bool VaapiWrapper::GetVAEncMaxNumOfRefFr
 }
 
 bool VaapiWrapper::IsRotationSupported() {
+#if VA_CHECK_VERSION(1, 1, 0)
   base::AutoLock auto_lock(*va_lock_);
   VAProcPipelineCaps pipeline_caps;
   memset(&pipeline_caps, 0, sizeof(pipeline_caps));
@@ -2429,6 +2516,10 @@ bool VaapiWrapper::IsRotationSupported()
     return false;
   }
   return true;
+#else
+  DVLOG(2) << "VA-API driver doesn't support any rotation";
+  return false;
+#endif
 }
 
 bool VaapiWrapper::BlitSurface(const VASurface& va_surface_src,
@@ -2483,6 +2574,7 @@ bool VaapiWrapper::BlitSurface(const VAS
     pipeline_param->output_color_standard = VAProcColorStandardNone;
     pipeline_param->filter_flags = VA_FILTER_SCALING_DEFAULT;
 
+#if VA_CHECK_VERSION(1, 1, 0)
     switch (rotation) {
       case VIDEO_ROTATION_0:
         pipeline_param->rotation_state = VA_ROTATION_NONE;
@@ -2497,6 +2589,7 @@ bool VaapiWrapper::BlitSurface(const VAS
         pipeline_param->rotation_state = VA_ROTATION_270;
         break;
     }
+#endif
 
     VA_SUCCESS_OR_RETURN(mapping.Unmap(), VaapiFunctions::kVAUnmapBuffer,
                          false);
Index: dev/media/gpu/chromeos/fourcc.cc
===================================================================
--- dev.orig/media/gpu/chromeos/fourcc.cc
+++ dev/media/gpu/chromeos/fourcc.cc
@@ -215,11 +215,11 @@ uint32_t Fourcc::ToV4L2PixFmt() const {
 // static
 base::Optional<Fourcc> Fourcc::FromVAFourCC(uint32_t va_fourcc) {
   switch (va_fourcc) {
-    case VA_FOURCC_I420:
+    case VA_FOURCC('I', '4', '2', '0'):
       return Fourcc(YU12);
     case VA_FOURCC_NV12:
       return Fourcc(NV12);
-    case VA_FOURCC_NV21:
+    case VA_FOURCC('N', 'V', '2', '1'):
       return Fourcc(NV21);
     case VA_FOURCC_YV12:
       return Fourcc(YV12);
@@ -245,11 +245,11 @@ base::Optional<Fourcc> Fourcc::FromVAFou
 base::Optional<uint32_t> Fourcc::ToVAFourCC() const {
   switch (value_) {
     case YU12:
-      return VA_FOURCC_I420;
+      return VA_FOURCC('I', '4', '2', '0');
     case NV12:
       return VA_FOURCC_NV12;
     case NV21:
-      return VA_FOURCC_NV21;
+      return VA_FOURCC('N', 'V', '2', '1');
     case YV12:
       return VA_FOURCC_YV12;
     case YUYV:
Index: dev/ui/gfx/x/gen_xproto.py
===================================================================
--- dev.orig/ui/gfx/x/gen_xproto.py
+++ dev/ui/gfx/x/gen_xproto.py
@@ -264,7 +264,7 @@ class GenXproto(FileWriter):
             return 'Request'
         elif t.is_reply:
             return 'Reply'
-        elif t.is_event:
+        elif isinstance(t, self.xcbgen.xtypes.Event):
             return 'Event'
         return ''
 
@@ -472,7 +472,7 @@ class GenXproto(FileWriter):
                 copy_basic()
             else:
                 container_type, container_name = field.parent
-                assert container_type.is_event
+                assert isinstance(container_type, self.xcbgen.xtypes.Event)
                 # Extension events require offsetting the opcode, so make
                 # sure this path is only hit for non-extension events for now.
                 assert not self.module.namespace.is_ext
@@ -497,7 +497,8 @@ class GenXproto(FileWriter):
             self.copy_primitive(name)
 
     def declare_case(self, case):
-        assert case.type.is_case != case.type.is_bitcase
+        if hasattr(case.type, 'is_case'):
+            assert case.type.is_case != case.type.is_bitcase
 
         fields = [
             field for case_field in case.type.fields
@@ -513,7 +514,10 @@ class GenXproto(FileWriter):
         return [(typename, name)]
 
     def copy_case(self, case, switch_name):
-        op = 'CaseEq' if case.type.is_case else 'CaseAnd'
+        if hasattr(case.type, "is_case"):
+            op = 'CaseEq' if case.type.is_case else 'CaseAnd'
+        else:
+            op = 'CaseAnd'
         condition = ' || '.join([
             '%s(%s_expr, %s)' % (op, switch_name, self.expr(expr))
             for expr in case.type.expr
@@ -949,7 +953,7 @@ class GenXproto(FileWriter):
             self.write_special_container(item, name)
         if isinstance(item, self.xcbgen.xtypes.Request):
             self.define_request(item)
-        elif item.is_event:
+        elif isinstance(item, self.xcbgen.xtypes.Event):
             self.define_event(item, name)
         elif isinstance(item, self.xcbgen.xtypes.Error):
             self.define_error(item, name)
@@ -959,7 +963,7 @@ class GenXproto(FileWriter):
             self.declare_union(item)
         elif isinstance(item, self.xcbgen.xtypes.Request):
             self.declare_request(item)
-        elif item.is_event:
+        elif isinstance(item, self.xcbgen.xtypes.Event):
             self.declare_event(item, name)
         elif isinstance(item, self.xcbgen.xtypes.Error):
             self.declare_error(item, name)
@@ -1041,7 +1045,7 @@ class GenXproto(FileWriter):
                         and field_name in fields):
                     setattr(fields[field_name], for_type, field)
 
-            if field.type.is_switch or field.type.is_case_or_bitcase:
+            if field.type.is_switch or (field.type.is_case_or_bitcase if hasattr(field.type, 'is_case_or_bitcase') else field.type.is_bitcase):
                 self.resolve_type(field.type, field.field_type)
 
         if isinstance(t, self.xcbgen.xtypes.Request) and t.reply:
@@ -1201,6 +1205,11 @@ class GenXproto(FileWriter):
         for direct_import in sorted(list(imports)):
             self.write('#include "%s.h"' % direct_import[-1])
         self.write()
+        self.write('#define X11_%s_MAJOR_VERSION %s' %
+                (self.class_name.upper(), self.module.namespace.major_version))
+        self.write('#define X11_%s_MINOR_VERSION %s' %
+                (self.class_name.upper(), self.module.namespace.minor_version))
+        self.write()
         self.write('namespace x11 {')
         self.write()
         self.write('class Connection;')
Index: dev/ui/gtk/gtk_util.cc
===================================================================
--- dev.orig/ui/gtk/gtk_util.cc
+++ dev/ui/gtk/gtk_util.cc
@@ -32,7 +32,9 @@
 #include "ui/ozone/public/ozone_platform.h"
 #include "ui/views/linux_ui/linux_ui.h"
 
+#if GTK_CHECK_VERSION(3, 20, 0)
 WEAK_GTK_FN(gtk_widget_path_iter_set_object_name);
+#endif
 WEAK_GTK_FN(gtk_widget_path_iter_set_state);
 
 namespace {
@@ -327,8 +329,10 @@ ScopedStyleContext AppendCssNodeToStyleC
           break;
         case CSS_OBJECT_NAME:
           if (GtkCheckVersion(3, 20)) {
+#if GTK_CHECK_VERSION(3, 20, 0)
             DCHECK(gtk_widget_path_iter_set_object_name);
             gtk_widget_path_iter_set_object_name(path, -1, t.token().c_str());
+#endif
           } else {
             gtk_widget_path_iter_add_class(path, -1, t.token().c_str());
           }
@@ -338,8 +342,10 @@ ScopedStyleContext AppendCssNodeToStyleC
           DCHECK(type);
           gtk_widget_path_append_type(path, type);
           if (GtkCheckVersion(3, 20) && t.token() == "GtkLabel") {
+#if GTK_CHECK_VERSION(3, 20, 0)
             DCHECK(gtk_widget_path_iter_set_object_name);
             gtk_widget_path_iter_set_object_name(path, -1, "label");
+#endif
           }
           break;
         }
Index: dev/ui/gfx/linux/drm_util_linux.cc
===================================================================
--- dev.orig/ui/gfx/linux/drm_util_linux.cc
+++ dev/ui/gfx/linux/drm_util_linux.cc
@@ -8,6 +8,15 @@
 
 #include "base/notreached.h"
 
+#ifndef DRM_FORMAT_INVALID
+// TODO(mcasas): Remove when uprevving //third_party/libdrm.
+#define DRM_FORMAT_INVALID 0
+#endif
+
+#ifndef DRM_FORMAT_P010
+#define DRM_FORMAT_P010 fourcc_code('P', '0', '1', '0')
+#endif
+
 namespace ui {
 
 int GetFourCCFormatFromBufferFormat(gfx::BufferFormat format) {
Index: dev/ui/base/x/x11_display_util.cc
===================================================================
--- dev.orig/ui/base/x/x11_display_util.cc
+++ dev/ui/base/x/x11_display_util.cc
@@ -34,6 +34,7 @@ std::map<x11::RandR::Output, int> GetMon
                                               x11::RandR* randr,
                                               x11::Window window) {
   std::map<x11::RandR::Output, int> output_to_monitor;
+#if X11_RANDR_MINOR_VERSION >= 5
   if (version >= 105) {
     if (auto reply = randr->GetMonitors({window}).Sync()) {
       for (size_t monitor = 0; monitor < reply->monitors.size(); monitor++) {
@@ -42,6 +43,7 @@ std::map<x11::RandR::Output, int> GetMon
       }
     }
   }
+#endif
   return output_to_monitor;
 }
 
Index: dev/third_party/nearby/src/cpp/core/internal/payload_manager.cc
===================================================================
--- dev.orig/third_party/nearby/src/cpp/core/internal/payload_manager.cc
+++ dev/third_party/nearby/src/cpp/core/internal/payload_manager.cc
@@ -942,7 +942,7 @@ PayloadManager::PendingPayload::PendingP
   for (const auto& id : endpoint_ids) {
     endpoints_.emplace(id, EndpointInfo{
                                .id = id,
-                               .status {EndpointInfo::Status::kAvailable},
+                               .status = AtomicReference<EndpointInfo::Status>(EndpointInfo::Status::kAvailable),
                            });
   }
 }
Index: dev/ui/gfx/x/event.cc
===================================================================
--- dev.orig/ui/gfx/x/event.cc
+++ dev/ui/gfx/x/event.cc
@@ -35,6 +35,10 @@ Event::Event(scoped_refptr<base::RefCoun
     if ((xcb_event->response_type & ~kSendEventMask) ==
         GeGenericEvent::opcode) {
       auto* ge = reinterpret_cast<xcb_ge_event_t*>(xcb_event);
+#if 1
+      // Xenial doesn't know what xcb_raw_generic_event_t is
+      memmove(&ge->full_sequence, &ge[1], ge->length * 4);
+#else
       constexpr size_t ge_length = sizeof(xcb_raw_generic_event_t);
       constexpr size_t offset = sizeof(ge->full_sequence);
       size_t extended_length = ge->length * 4;
@@ -50,6 +54,7 @@ Event::Event(scoped_refptr<base::RefCoun
             event_bytes, offset, ge_length + extended_length);
         xcb_event = reinterpret_cast<xcb_generic_event_t*>(addr + offset);
       }
+#endif
     }
   }
 
Index: dev/base/rand_util_posix.cc
===================================================================
--- dev.orig/base/rand_util_posix.cc
+++ dev/base/rand_util_posix.cc
@@ -9,6 +9,7 @@
 #include <stddef.h>
 #include <stdint.h>
 #include <unistd.h>
+#include <features.h>
 
 #include "base/check.h"
 #include "base/compiler_specific.h"
@@ -24,8 +25,10 @@
 #if !defined(OS_IOS) && !defined(OS_NACL)
 // TODO(crbug.com/995996): Waiting for this header to appear in the iOS SDK.
 // (See below.)
+#if __GLIBC_PREREQ(2, 25)
 #include <sys/random.h>
 #endif
+#endif
 
 namespace {
 
@@ -65,10 +68,14 @@ namespace base {
 // it or some form of it.
 void RandBytes(void* output, size_t output_length) {
 #if (defined(OS_LINUX) || defined(OS_CHROMEOS)) && !defined(OS_NACL)
+#if __GLIBC_PREREQ(2, 25)
+  const ssize_t r = getrandom(output, output_length, 0);
+#else
   // We have to call `getrandom` via Linux Syscall Support, rather than through
   // the libc wrapper, because we might not have an up-to-date libc (e.g. on
   // some bots).
   const ssize_t r = HANDLE_EINTR(sys_getrandom(output, output_length, 0));
+#endif
 
   // Return success only on total success. In case errno == ENOSYS (or any other
   // error), we'll fall through to reading from urandom below.
Index: dev/ui/ozone/platform/wayland/host/gtk_ui_delegate_wayland.cc
===================================================================
--- dev.orig/ui/ozone/platform/wayland/host/gtk_ui_delegate_wayland.cc
+++ dev/ui/ozone/platform/wayland/host/gtk_ui_delegate_wayland.cc
@@ -21,9 +21,7 @@
 #include "ui/ozone/platform/wayland/host/xdg_foreign_wrapper.h"
 #include "ui/platform_window/platform_window_init_properties.h"
 
-#define WEAK_GTK_FN(x) extern "C" __attribute__((weak)) decltype(x) x
-
-WEAK_GTK_FN(gdk_wayland_window_set_transient_for_exported);
+extern "C" gboolean gdk_wayland_window_set_transient_for_exported (GdkWindow *window,  char *parent_handle_str) __attribute__((weak));
 
 namespace ui {
 
Index: dev/sandbox/policy/linux/bpf_gpu_policy_linux.cc
===================================================================
--- dev.orig/sandbox/policy/linux/bpf_gpu_policy_linux.cc
+++ dev/sandbox/policy/linux/bpf_gpu_policy_linux.cc
@@ -47,6 +47,7 @@ ResultExpr GpuProcessPolicy::EvaluateSys
       return Allow();
 #endif  // BUILDFLAG(IS_CHROMEOS_ASH)
     case __NR_fcntl: {
+#if defined(F_SEAL_SEAL)
       // The Nvidia driver uses flags not in the baseline policy
       // fcntl(fd, F_ADD_SEALS, F_SEAL_SEAL | F_SEAL_SHRINK | F_SEAL_GROW)
       // https://crbug.com/1128175
@@ -56,6 +57,7 @@ ResultExpr GpuProcessPolicy::EvaluateSys
       const uint64_t kAllowedMask = F_SEAL_SEAL | F_SEAL_SHRINK | F_SEAL_GROW;
       if (cmd == F_ADD_SEALS && (long_arg & ~kAllowedMask) == 0)
         return Allow();
+#endif
 
       break;
     }
Index: dev/third_party/wayland/src/src/scanner.c
===================================================================
--- dev.orig/third_party/wayland/src/src/scanner.c
+++ dev/third_party/wayland/src/src/scanner.c
@@ -974,17 +974,6 @@ verify_arguments(struct parse_context *c
 
 }
 
-#ifndef HAVE_STRNDUP
-char *
-strndup(const char *s, size_t size)
-{
-	char *r = malloc(size + 1);
-	strncpy(r, s, size);
-	r[size] = '\0';
-	return r;
-}
-#endif
-
 static void
 end_element(void *data, const XML_Char *name)
 {
Index: dev/third_party/libva_protected_content/va_protected_content.h
===================================================================
--- dev.orig/third_party/libva_protected_content/va_protected_content.h
+++ dev/third_party/libva_protected_content/va_protected_content.h
@@ -132,6 +132,10 @@ extern "C" {
 #define VA_PC_SAMPLE_TYPE_FULLSAMPLE 0x00000001
 #define VA_PC_SAMPLE_TYPE_SUBSAMPLE 0x00000002
 
+#ifndef VA_PADDING_MEDIUM
+#define VA_PADDING_MEDIUM 8
+#endif
+
 /** \brief TeeExec Function Codes. */
 typedef enum _VA_TEE_EXEC_FUNCTION_ID {
   VA_TEE_EXEC_TEE_FUNCID_PASS_THROUGH_NONE = 0x0,
Index: dev/third_party/snappy/src/snappy.cc
===================================================================
--- dev.orig/third_party/snappy/src/snappy.cc
+++ dev/third_party/snappy/src/snappy.cc
@@ -1026,15 +1026,8 @@ size_t AdvanceToNextTag(const uint8_t**
   size_t literal_len = *tag >> 2;
   size_t tag_type = *tag;
   bool is_literal;
-#if defined(__GNUC__) && defined(__x86_64__)
-  // TODO clang misses the fact that the (c & 3) already correctly
-  // sets the zero flag.
-  asm("and $3, %k[tag_type]\n\t"
-      : [tag_type] "+r"(tag_type), "=@ccz"(is_literal));
-#else
   tag_type &= 3;
   is_literal = (tag_type == 0);
-#endif
   // TODO
   // This is code is subtle. Loading the values first and then cmov has less
   // latency then cmov ip and then load. However clang would move the loads
