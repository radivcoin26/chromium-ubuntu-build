Index: dev/media/gpu/vaapi/vaapi_mjpeg_decode_accelerator.cc
===================================================================
--- dev.orig/media/gpu/vaapi/vaapi_mjpeg_decode_accelerator.cc
+++ dev/media/gpu/vaapi/vaapi_mjpeg_decode_accelerator.cc
@@ -72,7 +72,7 @@ static bool VerifyDataSize(const VAImage
   const gfx::Size dimensions(base::strict_cast<int>(image->width),
                              base::strict_cast<int>(image->height));
   size_t min_size = 0;
-  if (image->format.fourcc == VA_FOURCC_I420) {
+  if (image->format.fourcc == VA_FOURCC('I', '4', '2', '0')) {
     min_size = VideoFrame::AllocationSize(PIXEL_FORMAT_I420, dimensions);
   } else if (image->format.fourcc == VA_FOURCC_NV12) {
     min_size = VideoFrame::AllocationSize(PIXEL_FORMAT_NV12, dimensions);
@@ -255,7 +255,7 @@ bool VaapiMjpegDecodeAccelerator::Output
   }
 
   switch (image->format.fourcc) {
-    case VA_FOURCC_I420:
+    case VA_FOURCC('I', '4', '2', '0'):
       DCHECK_EQ(image->num_planes, 3u);
       switch (video_frame->format()) {
         case PIXEL_FORMAT_I420:
Index: dev/media/gpu/vaapi/vaapi_video_encode_accelerator.h
===================================================================
--- dev.orig/media/gpu/vaapi/vaapi_video_encode_accelerator.h
+++ dev/media/gpu/vaapi/vaapi_video_encode_accelerator.h
@@ -52,7 +52,9 @@ class MEDIA_GPU_EXPORT VaapiVideoEncodeA
   friend class VaapiVideoEncodeAcceleratorTest;
   class H264Accelerator;
   class VP8Accelerator;
+#if VA_CHECK_VERSION(0, 39, 2)
   class VP9Accelerator;
+#endif
 
   // Encoder state.
   enum State {
Index: dev/media/gpu/vaapi/vaapi_video_encode_accelerator.cc
===================================================================
--- dev.orig/media/gpu/vaapi/vaapi_video_encode_accelerator.cc
+++ dev/media/gpu/vaapi/vaapi_video_encode_accelerator.cc
@@ -75,7 +75,9 @@ void FillVAEncRateControlParams(
   rate_control_param.window_size = window_size;
   rate_control_param.initial_qp = initial_qp;
   rate_control_param.min_qp = min_qp;
+#if VA_CHECK_VERSION(1, 1, 0)
   rate_control_param.max_qp = max_qp;
+#endif
   rate_control_param.rc_flags.bits.disable_frame_skip = true;
 
   memset(&framerate_param, 0, sizeof(framerate_param));
@@ -226,6 +228,7 @@ class VaapiVideoEncodeAccelerator::VP8Ac
   VaapiVideoEncodeAccelerator* const vea_;
 };
 
+#if VA_CHECK_VERSION(0, 39, 2)
 class VaapiVideoEncodeAccelerator::VP9Accelerator
     : public VP9Encoder::Accelerator {
  public:
@@ -247,6 +250,7 @@ class VaapiVideoEncodeAccelerator::VP9Ac
  private:
   VaapiVideoEncodeAccelerator* const vea_;
 };
+#endif
 
 VaapiVideoEncodeAccelerator::VaapiVideoEncodeAccelerator()
     : output_buffer_byte_size_(0),
@@ -401,6 +405,7 @@ void VaapiVideoEncodeAccelerator::Initia
       DCHECK_EQ(ave_config.bitrate_control,
                 AcceleratedVideoEncoder::BitrateControl::kConstantBitrate);
       break;
+#if VA_CHECK_VERSION(0, 39, 2)
     case kCodecVP9:
       if (!IsConfiguredForTesting()) {
         encoder_ = std::make_unique<VP9Encoder>(
@@ -409,6 +414,7 @@ void VaapiVideoEncodeAccelerator::Initia
       ave_config.bitrate_control = AcceleratedVideoEncoder::BitrateControl::
           kConstantQuantizationParameter;
       break;
+#endif
     default:
       NOTREACHED() << "Unsupported codec type " << GetCodecName(output_codec_);
       return;
@@ -1457,6 +1463,7 @@ bool VaapiVideoEncodeAccelerator::VP8Acc
   return true;
 }
 
+#if VA_CHECK_VERSION(0, 39, 2)
 scoped_refptr<VP9Picture>
 VaapiVideoEncodeAccelerator::VP9Accelerator::GetPicture(
     AcceleratedVideoEncoder::EncodeJob* job) {
@@ -1603,5 +1610,6 @@ bool VaapiVideoEncodeAccelerator::VP9Acc
 
   return true;
 }
+#endif
 
 }  // namespace media
Index: dev/media/gpu/vaapi/vaapi_wrapper.cc
===================================================================
--- dev.orig/media/gpu/vaapi/vaapi_wrapper.cc
+++ dev/media/gpu/vaapi/vaapi_wrapper.cc
@@ -11,7 +11,9 @@
 #include <va/va.h>
 #include <va/va_drm.h>
 #include <va/va_drmcommon.h>
+#if VA_CHECK_VERSION(1, 0, 0)
 #include <va/va_str.h>
+#endif
 #include <va/va_version.h>
 #include <xf86drm.h>
 
@@ -405,7 +407,9 @@ const ProfileCodecMap& GetProfileCodecMa
           {VP9PROFILE_PROFILE2, VAProfileVP9Profile2},
       // VaapiWrapper does not support Profile 3.
       //{VP9PROFILE_PROFILE3, VAProfileVP9Profile3},
+#if VA_CHECK_VERSION(1, 7, 0)
           {AV1PROFILE_PROFILE_MAIN, VAProfileAV1Profile0},
+#endif
         // VaapiWrapper does not support AV1 Profile 1.
         // {AV1PROFILE_PROFILE_HIGH, VAProfileAV1Profile1},
 #if BUILDFLAG(ENABLE_PLATFORM_HEVC)
@@ -442,8 +446,12 @@ bool IsVAProfileSupported(VAProfile va_p
 
 bool IsBlockedDriver(VaapiWrapper::CodecMode mode, VAProfile va_profile) {
   if (!IsModeEncoding(mode)) {
+#if VA_CHECK_VERSION(1, 7, 0)
     return va_profile == VAProfileAV1Profile0 &&
            !base::FeatureList::IsEnabled(kVaapiAV1Decoder);
+#else
+    return false;
+#endif
   }
 
   // TODO(posciak): Remove once VP8 encoding is to be enabled by default.
@@ -1179,7 +1187,7 @@ bool VASupportedProfiles::FillProfileInf
       continue;
     if (attrib.value & VA_RT_FORMAT_YUV420)
       profile_info->supported_internal_formats.yuv420 = true;
-    if (attrib.value & VA_RT_FORMAT_YUV420_10)
+    if (attrib.value & VA_RT_FORMAT_YUV420_10BPP)
       profile_info->supported_internal_formats.yuv420_10 = true;
     if (attrib.value & VA_RT_FORMAT_YUV422)
       profile_info->supported_internal_formats.yuv422 = true;
@@ -1501,7 +1509,7 @@ bool VaapiWrapper::IsDecodingSupportedFo
   switch (rt_format) {
     case VA_RT_FORMAT_YUV420:
       return supported_internal_formats->yuv420;
-    case VA_RT_FORMAT_YUV420_10:
+    case VA_RT_FORMAT_YUV420_10BPP:
       return supported_internal_formats->yuv420_10;
     case VA_RT_FORMAT_YUV422:
       return supported_internal_formats->yuv422;
@@ -1588,8 +1596,10 @@ bool VaapiWrapper::GetJpegDecodeSuitable
     // (b/159896972): iHD v20.1.1 cannot create Y216 and Y416 images from a
     // decoded JPEG on gen 12. It is also failing to support Y800 format.
     if (preferred_fourcc == VA_FOURCC_AYUV ||
+#if VA_CHECK_VERSION(1, 2, 0)
         preferred_fourcc == VA_FOURCC_Y216 ||
         preferred_fourcc == VA_FOURCC_Y416 ||
+#endif
         preferred_fourcc == VA_FOURCC_Y800) {
       preferred_fourcc = VA_FOURCC_I420;
     }
Index: dev/media/gpu/chromeos/fourcc.cc
===================================================================
--- dev.orig/media/gpu/chromeos/fourcc.cc
+++ dev/media/gpu/chromeos/fourcc.cc
@@ -217,11 +217,11 @@ uint32_t Fourcc::ToV4L2PixFmt() const {
 // static
 base::Optional<Fourcc> Fourcc::FromVAFourCC(uint32_t va_fourcc) {
   switch (va_fourcc) {
-    case VA_FOURCC_I420:
+    case VA_FOURCC('I', '4', '2', '0'):
       return Fourcc(YU12);
     case VA_FOURCC_NV12:
       return Fourcc(NV12);
-    case VA_FOURCC_NV21:
+    case VA_FOURCC('N', 'V', '2', '1'):
       return Fourcc(NV21);
     case VA_FOURCC_YV12:
       return Fourcc(YV12);
@@ -247,11 +247,11 @@ base::Optional<Fourcc> Fourcc::FromVAFou
 base::Optional<uint32_t> Fourcc::ToVAFourCC() const {
   switch (value_) {
     case YU12:
-      return VA_FOURCC_I420;
+      return VA_FOURCC('I', '4', '2', '0');
     case NV12:
       return VA_FOURCC_NV12;
     case NV21:
-      return VA_FOURCC_NV21;
+      return VA_FOURCC('N', 'V', '2', '1');
     case YV12:
       return VA_FOURCC_YV12;
     case YUYV:
Index: dev/ui/gfx/x/gen_xproto.py
===================================================================
--- dev.orig/ui/gfx/x/gen_xproto.py
+++ dev/ui/gfx/x/gen_xproto.py
@@ -274,7 +274,7 @@ class GenXproto(FileWriter):
             return 'Request'
         elif t.is_reply:
             return 'Reply'
-        elif t.is_event:
+        elif isinstance(t, self.xcbgen.xtypes.Event):
             return 'Event'
         return ''
 
@@ -475,7 +475,7 @@ class GenXproto(FileWriter):
                 copy_basic()
             else:
                 container_type, container_name = field.parent
-                assert container_type.is_event
+                assert isinstance(container_type, self.xcbgen.xtypes.Event)
                 # Extension events require offsetting the opcode, so make
                 # sure this path is only hit for non-extension events for now.
                 assert not self.module.namespace.is_ext
@@ -500,7 +500,8 @@ class GenXproto(FileWriter):
             self.copy_primitive(name)
 
     def declare_case(self, case):
-        assert case.type.is_case != case.type.is_bitcase
+        if hasattr(case.type, 'is_case'):
+            assert case.type.is_case != case.type.is_bitcase
 
         fields = [
             field for case_field in case.type.fields
@@ -516,7 +517,10 @@ class GenXproto(FileWriter):
         return [(typename, name)]
 
     def copy_case(self, case, switch_name):
-        op = 'CaseEq' if case.type.is_case else 'CaseAnd'
+        if hasattr(case.type, "is_case"):
+            op = 'CaseEq' if case.type.is_case else 'CaseAnd'
+        else:
+            op = 'CaseAnd'
         condition = ' || '.join([
             '%s(%s_expr, %s)' % (op, switch_name, self.expr(expr))
             for expr in case.type.expr
@@ -1016,7 +1020,7 @@ class GenXproto(FileWriter):
             self.write_special_container(item, name)
         if isinstance(item, self.xcbgen.xtypes.Request):
             self.define_request(item)
-        elif item.is_event:
+        elif isinstance(item, self.xcbgen.xtypes.Event):
             self.define_event(item, name)
         elif isinstance(item, self.xcbgen.xtypes.Error):
             self.define_error(item, name)
@@ -1026,7 +1030,7 @@ class GenXproto(FileWriter):
             self.declare_union(item)
         elif isinstance(item, self.xcbgen.xtypes.Request):
             self.declare_request(item)
-        elif item.is_event:
+        elif isinstance(item, self.xcbgen.xtypes.Event):
             self.declare_event(item, name)
         elif isinstance(item, self.xcbgen.xtypes.Error):
             self.declare_error(item, name)
@@ -1108,7 +1112,7 @@ class GenXproto(FileWriter):
                         and field_name in fields):
                     setattr(fields[field_name], for_type, field)
 
-            if field.type.is_switch or field.type.is_case_or_bitcase:
+            if field.type.is_switch or (field.type.is_case_or_bitcase if hasattr(field.type, 'is_case_or_bitcase') else field.type.is_bitcase):
                 self.resolve_type(field.type, field.field_type)
 
         if isinstance(t, self.xcbgen.xtypes.Request) and t.reply:
@@ -1232,6 +1236,11 @@ class GenXproto(FileWriter):
         for direct_import in sorted(list(imports)):
             self.write('#include "%s.h"' % direct_import[-1])
         self.write()
+        self.write('#define X11_%s_MAJOR_VERSION %s' %
+                (self.class_name.upper(), self.module.namespace.major_version))
+        self.write('#define X11_%s_MINOR_VERSION %s' %
+                (self.class_name.upper(), self.module.namespace.minor_version))
+        self.write()
         self.write('namespace x11 {')
         self.write()
         self.write('class Connection;')
Index: dev/ui/gtk/gtk_util.cc
===================================================================
--- dev.orig/ui/gtk/gtk_util.cc
+++ dev/ui/gtk/gtk_util.cc
@@ -33,7 +33,9 @@
 #include "ui/views/linux_ui/linux_ui.h"
 
 #if BUILDFLAG(GTK_VERSION) < 4
+#if GTK_CHECK_VERSION(3, 20, 0)
 WEAK_GTK_FN(gtk_widget_path_iter_set_object_name);
+#endif
 WEAK_GTK_FN(gtk_widget_path_iter_set_state);
 #endif
 
@@ -130,8 +132,10 @@ GtkCssContext AppendCssNodeToStyleContex
 
   if (!object_name.empty()) {
     if (GtkCheckVersion(3, 20)) {
+#if GTK_CHECK_VERSION(3, 20, 0)
       DCHECK(gtk_widget_path_iter_set_object_name);
       gtk_widget_path_iter_set_object_name(path, -1, object_name.c_str());
+#endif
     } else {
       gtk_widget_path_iter_add_class(path, -1, object_name.c_str());
     }
Index: dev/ui/gfx/linux/drm_util_linux.cc
===================================================================
--- dev.orig/ui/gfx/linux/drm_util_linux.cc
+++ dev/ui/gfx/linux/drm_util_linux.cc
@@ -8,6 +8,15 @@
 
 #include "base/notreached.h"
 
+#ifndef DRM_FORMAT_INVALID
+// TODO(mcasas): Remove when uprevving //third_party/libdrm.
+#define DRM_FORMAT_INVALID 0
+#endif
+
+#ifndef DRM_FORMAT_P010
+#define DRM_FORMAT_P010 fourcc_code('P', '0', '1', '0')
+#endif
+
 namespace ui {
 
 int GetFourCCFormatFromBufferFormat(gfx::BufferFormat format) {
Index: dev/ui/base/x/x11_display_util.cc
===================================================================
--- dev.orig/ui/base/x/x11_display_util.cc
+++ dev/ui/base/x/x11_display_util.cc
@@ -34,6 +34,7 @@ std::map<x11::RandR::Output, int> GetMon
                                               x11::RandR* randr,
                                               x11::Window window) {
   std::map<x11::RandR::Output, int> output_to_monitor;
+#if X11_RANDR_MINOR_VERSION >= 5
   if (version >= 105) {
     if (auto reply = randr->GetMonitors({window}).Sync()) {
       for (size_t monitor = 0; monitor < reply->monitors.size(); monitor++) {
@@ -42,6 +43,7 @@ std::map<x11::RandR::Output, int> GetMon
       }
     }
   }
+#endif
   return output_to_monitor;
 }
 
Index: dev/third_party/nearby/src/cpp/core/internal/payload_manager.cc
===================================================================
--- dev.orig/third_party/nearby/src/cpp/core/internal/payload_manager.cc
+++ dev/third_party/nearby/src/cpp/core/internal/payload_manager.cc
@@ -944,7 +944,7 @@ PayloadManager::PendingPayload::PendingP
   for (const auto& id : endpoint_ids) {
     endpoints_.emplace(id, EndpointInfo{
                                .id = id,
-                               .status {EndpointInfo::Status::kAvailable},
+                               .status = AtomicReference<EndpointInfo::Status>(EndpointInfo::Status::kAvailable),
                            });
   }
 }
Index: dev/ui/gfx/x/event.cc
===================================================================
--- dev.orig/ui/gfx/x/event.cc
+++ dev/ui/gfx/x/event.cc
@@ -35,6 +35,10 @@ Event::Event(scoped_refptr<base::RefCoun
     if ((xcb_event->response_type & ~kSendEventMask) ==
         GeGenericEvent::opcode) {
       auto* ge = reinterpret_cast<xcb_ge_event_t*>(xcb_event);
+#if 1
+      // Xenial doesn't know what xcb_raw_generic_event_t is
+      memmove(&ge->full_sequence, &ge[1], ge->length * 4);
+#else
       constexpr size_t ge_length = sizeof(xcb_raw_generic_event_t);
       constexpr size_t offset = sizeof(ge->full_sequence);
       size_t extended_length = ge->length * 4;
@@ -50,6 +54,7 @@ Event::Event(scoped_refptr<base::RefCoun
             event_bytes, offset, ge_length + extended_length);
         xcb_event = reinterpret_cast<xcb_generic_event_t*>(addr + offset);
       }
+#endif
     }
   }
 
Index: dev/base/rand_util_posix.cc
===================================================================
--- dev.orig/base/rand_util_posix.cc
+++ dev/base/rand_util_posix.cc
@@ -9,6 +9,7 @@
 #include <stddef.h>
 #include <stdint.h>
 #include <unistd.h>
+#include <features.h>
 
 #include "base/check.h"
 #include "base/compiler_specific.h"
@@ -18,7 +19,11 @@
 #include "build/build_config.h"
 
 #if (defined(OS_LINUX) || defined(OS_CHROMEOS)) && !defined(OS_NACL)
+#if __GLIBC_PREREQ(2, 25)
+#include <sys/random.h>
+#else
 #include "third_party/lss/linux_syscall_support.h"
+#endif
 #elif defined(OS_MAC)
 // TODO(crbug.com/995996): Waiting for this header to appear in the iOS SDK.
 // (See below.)
@@ -63,10 +68,14 @@ namespace base {
 // it or some form of it.
 void RandBytes(void* output, size_t output_length) {
 #if (defined(OS_LINUX) || defined(OS_CHROMEOS)) && !defined(OS_NACL)
+#if __GLIBC_PREREQ(2, 25)
+  const ssize_t r = getrandom(output, output_length, 0);
+#else
   // We have to call `getrandom` via Linux Syscall Support, rather than through
   // the libc wrapper, because we might not have an up-to-date libc (e.g. on
   // some bots).
   const ssize_t r = HANDLE_EINTR(sys_getrandom(output, output_length, 0));
+#endif
 
   // Return success only on total success. In case errno == ENOSYS (or any other
   // error), we'll fall through to reading from urandom below.
Index: dev/ui/ozone/platform/wayland/host/gtk_ui_delegate_wayland.cc
===================================================================
--- dev.orig/ui/ozone/platform/wayland/host/gtk_ui_delegate_wayland.cc
+++ dev/ui/ozone/platform/wayland/host/gtk_ui_delegate_wayland.cc
@@ -25,9 +25,7 @@
 #else
 #include <gdk/gdkwayland.h>
 
-#define WEAK_GTK_FN(x) extern "C" __attribute__((weak)) decltype(x) x
-
-WEAK_GTK_FN(gdk_wayland_window_set_transient_for_exported);
+extern "C" gboolean gdk_wayland_window_set_transient_for_exported (GdkWindow *window,  char *parent_handle_str) __attribute__((weak));
 #endif
 
 namespace ui {
Index: dev/sandbox/policy/linux/bpf_gpu_policy_linux.cc
===================================================================
--- dev.orig/sandbox/policy/linux/bpf_gpu_policy_linux.cc
+++ dev/sandbox/policy/linux/bpf_gpu_policy_linux.cc
@@ -47,6 +47,7 @@ ResultExpr GpuProcessPolicy::EvaluateSys
       return Allow();
 #endif  // BUILDFLAG(IS_CHROMEOS_ASH)
     case __NR_fcntl: {
+#if defined(F_SEAL_SEAL)
       // The Nvidia driver uses flags not in the baseline policy
       // fcntl(fd, F_ADD_SEALS, F_SEAL_SEAL | F_SEAL_SHRINK | F_SEAL_GROW)
       // https://crbug.com/1128175
@@ -56,6 +57,7 @@ ResultExpr GpuProcessPolicy::EvaluateSys
       const uint64_t kAllowedMask = F_SEAL_SEAL | F_SEAL_SHRINK | F_SEAL_GROW;
       if (cmd == F_ADD_SEALS && (long_arg & ~kAllowedMask) == 0)
         return Allow();
+#endif
 
       break;
     }
Index: dev/third_party/wayland/src/src/scanner.c
===================================================================
--- dev.orig/third_party/wayland/src/src/scanner.c
+++ dev/third_party/wayland/src/src/scanner.c
@@ -974,17 +974,6 @@ verify_arguments(struct parse_context *c
 
 }
 
-#ifndef HAVE_STRNDUP
-char *
-strndup(const char *s, size_t size)
-{
-	char *r = malloc(size + 1);
-	strncpy(r, s, size);
-	r[size] = '\0';
-	return r;
-}
-#endif
-
 static void
 end_element(void *data, const XML_Char *name)
 {
Index: dev/third_party/libva_protected_content/va_protected_content.h
===================================================================
--- dev.orig/third_party/libva_protected_content/va_protected_content.h
+++ dev/third_party/libva_protected_content/va_protected_content.h
@@ -50,6 +50,10 @@ extern "C" {
  * The buffer corresponds to #VACencStatusParameters for va/cp*/
 #define VACencStatusParameterBufferType ((VABufferType)0x20002)
 
+#ifndef VA_PADDING_MEDIUM
+#define VA_PADDING_MEDIUM 8
+#endif
+
 /** \brief TeeExec Function Codes. */
 #define VA_TEE_EXEC_TEE_FUNCID_HW_UPDATE 0x40000002
 #define VA_TEE_EXEC_TEE_FUNCID_IS_SESSION_ALIVE 0x40000103
Index: dev/third_party/snappy/src/snappy.cc
===================================================================
--- dev.orig/third_party/snappy/src/snappy.cc
+++ dev/third_party/snappy/src/snappy.cc
@@ -1026,15 +1026,8 @@ size_t AdvanceToNextTag(const uint8_t**
   size_t literal_len = *tag >> 2;
   size_t tag_type = *tag;
   bool is_literal;
-#if defined(__GNUC__) && defined(__x86_64__)
-  // TODO clang misses the fact that the (c & 3) already correctly
-  // sets the zero flag.
-  asm("and $3, %k[tag_type]\n\t"
-      : [tag_type] "+r"(tag_type), "=@ccz"(is_literal));
-#else
   tag_type &= 3;
   is_literal = (tag_type == 0);
-#endif
   // TODO
   // This is code is subtle. Loading the values first and then cmov has less
   // latency then cmov ip and then load. However clang would move the loads
Index: dev/media/gpu/chromeos/platform_video_frame_utils.cc
===================================================================
--- dev.orig/media/gpu/chromeos/platform_video_frame_utils.cc
+++ dev/media/gpu/chromeos/platform_video_frame_utils.cc
@@ -37,6 +37,10 @@
 #include "ui/gfx/linux/native_pixmap_dmabuf.h"
 #include "ui/gfx/native_pixmap.h"
 
+#ifndef DRM_FORMAT_INVALID
+#define DRM_FORMAT_INVALID 0
+#endif
+
 namespace media {
 
 namespace {
Index: dev/media/gpu/vaapi/av1_vaapi_video_decoder_delegate.cc
===================================================================
--- dev.orig/media/gpu/vaapi/av1_vaapi_video_decoder_delegate.cc
+++ dev/media/gpu/vaapi/av1_vaapi_video_decoder_delegate.cc
@@ -20,6 +20,7 @@
 #include "third_party/libgav1/src/src/warp_prediction.h"
 
 namespace media {
+#if VA_CHECK_VERSION(1, 7, 0)
 namespace {
 
 #define ARRAY_SIZE(ar) (sizeof(ar) / sizeof(ar[0]))
@@ -716,6 +717,7 @@ bool FillAV1SliceParameters(
   return true;
 }
 }  // namespace
+#endif
 
 AV1VaapiVideoDecoderDelegate::AV1VaapiVideoDecoderDelegate(
     DecodeSurfaceHandler<VASurface>* const vaapi_dec,
@@ -734,6 +736,7 @@ AV1VaapiVideoDecoderDelegate::~AV1VaapiV
 scoped_refptr<AV1Picture> AV1VaapiVideoDecoderDelegate::CreateAV1Picture(
     bool apply_grain) {
   DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
+#if VA_CHECK_VERSION(1, 7, 0)
   const auto display_va_surface = vaapi_dec_->CreateSurface();
   if (!display_va_surface)
     return nullptr;
@@ -754,15 +757,22 @@ scoped_refptr<AV1Picture> AV1VaapiVideoD
 
   return base::MakeRefCounted<VaapiAV1Picture>(
       std::move(display_va_surface), std::move(reconstruct_va_surface));
+#else
+  return nullptr;
+#endif
 }
 
 bool AV1VaapiVideoDecoderDelegate::OutputPicture(const AV1Picture& pic) {
   DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
+#if VA_CHECK_VERSION(1, 7, 0)
   const auto* vaapi_pic = static_cast<const VaapiAV1Picture*>(&pic);
   vaapi_dec_->SurfaceReady(vaapi_pic->display_va_surface(),
                            vaapi_pic->bitstream_id(), vaapi_pic->visible_rect(),
                            vaapi_pic->get_colorspace());
   return true;
+#else
+  return false;
+#endif
 }
 
 bool AV1VaapiVideoDecoderDelegate::SubmitDecode(
@@ -778,6 +788,7 @@ bool AV1VaapiVideoDecoderDelegate::Submi
   const size_t tile_columns =
       base::checked_cast<size_t>(pic.frame_header.tile_info.tile_columns);
 
+#if VA_CHECK_VERSION(1, 7, 0)
   VADecPictureParameterBufferAV1 pic_param;
   std::vector<VASliceParameterBufferAV1> slice_params;
   if (!FillAV1PictureParameter(pic, seq_header, ref_frames, pic_param) ||
@@ -828,6 +839,9 @@ bool AV1VaapiVideoDecoderDelegate::Submi
   const auto* vaapi_pic = static_cast<const VaapiAV1Picture*>(&pic);
   return vaapi_wrapper_->MapAndCopyAndExecute(
       vaapi_pic->reconstruct_va_surface()->id(), buffers);
+#else
+  return false;
+#endif
 }
 
 void AV1VaapiVideoDecoderDelegate::OnVAContextDestructionSoon() {
Index: dev/media/gpu/vaapi/vaapi_video_decoder.cc
===================================================================
--- dev.orig/media/gpu/vaapi/vaapi_video_decoder.cc
+++ dev/media/gpu/vaapi/vaapi_video_decoder.cc
@@ -981,6 +981,7 @@ Status VaapiVideoDecoder::CreateAccelera
         new H265Decoder(std::move(accelerator), profile_, color_space_));
   }
 #endif  // BUILDFLAG(ENABLE_PLATFORM_HEVC)
+#if VA_CHECK_VERSION(1, 7, 0)
   else if (profile_ >= AV1PROFILE_MIN && profile_ <= AV1PROFILE_MAX) {
     auto accelerator =
         std::make_unique<AV1VaapiVideoDecoderDelegate>(this, vaapi_wrapper_);
@@ -988,6 +989,7 @@ Status VaapiVideoDecoder::CreateAccelera
 
     decoder_.reset(new AV1Decoder(std::move(accelerator), profile_));
   }
+#endif
   else {
     return Status(StatusCode::kDecoderUnsupportedProfile)
         .WithData("profile", profile_);
