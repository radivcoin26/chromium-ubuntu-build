Index: dev/cc/trees/frame_rate_estimator.cc
===================================================================
--- dev.orig/cc/trees/frame_rate_estimator.cc
+++ dev/cc/trees/frame_rate_estimator.cc
@@ -47,8 +47,8 @@ void FrameRateEstimator::WillDraw(base::
   // we assume that BeginFrames can not be throttled. But if the animation
   // frequency is lower than that, then using a lower frame rate is permitted.
   // The delta below is to account for minor offsets in frame times.
-  constexpr auto kFudgeDelta = base::Milliseconds(1);
-  constexpr auto kMinDelta =
+  auto kFudgeDelta = base::Milliseconds(1);
+  auto kMinDelta =
       (viz::BeginFrameArgs::DefaultInterval() * 2) - kFudgeDelta;
   if (draw_delta < kMinDelta)
     num_of_consecutive_frames_with_min_delta_++;
Index: dev/third_party/blink/renderer/platform/wtf/math_extras.h
===================================================================
--- dev.orig/third_party/blink/renderer/platform/wtf/math_extras.h
+++ dev/third_party/blink/renderer/platform/wtf/math_extras.h
@@ -127,11 +127,11 @@ constexpr float Grad2turn(float g) {
   return g * (1.0f / 400.0f);
 }
 
-constexpr double RoundHalfTowardsPositiveInfinity(double value) {
+inline double RoundHalfTowardsPositiveInfinity(double value) {
   return std::floor(value + 0.5);
 }
 
-constexpr float RoundHalfTowardsPositiveInfinity(float value) {
+inline float RoundHalfTowardsPositiveInfinity(float value) {
   return std::floor(value + 0.5f);
 }
 
Index: dev/sandbox/linux/services/credentials.cc
===================================================================
--- dev.orig/sandbox/linux/services/credentials.cc
+++ dev/sandbox/linux/services/credentials.cc
@@ -89,7 +89,7 @@ bool ChrootToSafeEmptyDir() {
 #endif
 
   int clone_flags = CLONE_FS | LINUX_SIGCHLD;
-  void* tls = nullptr;
+  char* tls = nullptr;
 #if (defined(ARCH_CPU_X86_64) || defined(ARCH_CPU_ARM_FAMILY)) && \
     !defined(MEMORY_SANITIZER)
   // Use CLONE_VM | CLONE_VFORK as an optimization to avoid copying page tables.
@@ -100,8 +100,7 @@ bool ChrootToSafeEmptyDir() {
   // TODO(crbug.com/1247458) Broken in MSan builds after LLVM f1bb30a4956f.
   clone_flags |= CLONE_VM | CLONE_VFORK | CLONE_SETTLS;
 
-  char tls_buf[PTHREAD_STACK_MIN] = {0};
-  tls = tls_buf;
+  tls = new char[PTHREAD_STACK_MIN]();
 #endif
 
   pid = clone(ChrootToSelfFdinfo, stack, clone_flags, nullptr, nullptr, tls,
@@ -111,6 +110,11 @@ bool ChrootToSafeEmptyDir() {
   int status = -1;
   PCHECK(HANDLE_EINTR(waitpid(pid, &status, 0)) == pid);
 
+#if (defined(ARCH_CPU_X86_64) || defined(ARCH_CPU_ARM_FAMILY)) && \
+    !defined(MEMORY_SANITIZER)
+  delete[] tls;
+#endif
+
   return WIFEXITED(status) && WEXITSTATUS(status) == kExitSuccess;
 }
 
Index: dev/third_party/breakpad/breakpad/src/client/linux/handler/exception_handler.cc
===================================================================
--- dev.orig/third_party/breakpad/breakpad/src/client/linux/handler/exception_handler.cc
+++ dev/third_party/breakpad/breakpad/src/client/linux/handler/exception_handler.cc
@@ -138,7 +138,7 @@ void InstallAlternateStackLocked() {
   // SIGSTKSZ may be too small to prevent the signal handlers from overrunning
   // the alternative stack. Ensure that the size of the alternative stack is
   // large enough.
-  static const unsigned kSigStackSize = std::max(16384, SIGSTKSZ);
+  static const ssize_t kSigStackSize = std::max<ssize_t>(16384, SIGSTKSZ);
 
   // Only set an alternative stack if there isn't already one, or if the current
   // one is too small.
