Index: dev/cc/trees/frame_rate_estimator.cc
===================================================================
--- dev.orig/cc/trees/frame_rate_estimator.cc
+++ dev/cc/trees/frame_rate_estimator.cc
@@ -47,8 +47,8 @@ void FrameRateEstimator::WillDraw(base::
   // we assume that BeginFrames can not be throttled. But if the animation
   // frequency is lower than that, then using a lower frame rate is permitted.
   // The delta below is to account for minor offsets in frame times.
-  constexpr auto kFudgeDelta = base::Milliseconds(1);
-  constexpr auto kMinDelta =
+  auto kFudgeDelta = base::Milliseconds(1);
+  auto kMinDelta =
       (viz::BeginFrameArgs::DefaultInterval() * 2) - kFudgeDelta;
   if (draw_delta < kMinDelta)
     num_of_consecutive_frames_with_min_delta_++;
Index: dev/third_party/blink/renderer/platform/wtf/math_extras.h
===================================================================
--- dev.orig/third_party/blink/renderer/platform/wtf/math_extras.h
+++ dev/third_party/blink/renderer/platform/wtf/math_extras.h
@@ -127,11 +127,11 @@ constexpr float Grad2turn(float g) {
   return g * (1.0f / 400.0f);
 }
 
-constexpr double RoundHalfTowardsPositiveInfinity(double value) {
+inline double RoundHalfTowardsPositiveInfinity(double value) {
   return std::floor(value + 0.5);
 }
 
-constexpr float RoundHalfTowardsPositiveInfinity(float value) {
+inline float RoundHalfTowardsPositiveInfinity(float value) {
   return std::floor(value + 0.5f);
 }
 
Index: dev/sandbox/linux/services/credentials.cc
===================================================================
--- dev.orig/sandbox/linux/services/credentials.cc
+++ dev/sandbox/linux/services/credentials.cc
@@ -89,7 +89,7 @@ bool ChrootToSafeEmptyDir() {
 #endif
 
   int clone_flags = CLONE_FS | LINUX_SIGCHLD;
-  void* tls = nullptr;
+  char* tls = nullptr;
 #if (defined(ARCH_CPU_X86_64) || defined(ARCH_CPU_ARM_FAMILY)) && \
     !defined(MEMORY_SANITIZER)
   // Use CLONE_VM | CLONE_VFORK as an optimization to avoid copying page tables.
@@ -114,6 +114,11 @@ bool ChrootToSafeEmptyDir() {
   int status = -1;
   PCHECK(HANDLE_EINTR(waitpid(pid, &status, 0)) == pid);
 
+#if (defined(ARCH_CPU_X86_64) || defined(ARCH_CPU_ARM_FAMILY)) && \
+    !defined(MEMORY_SANITIZER)
+  delete[] tls;
+#endif
+
   return WIFEXITED(status) && WEXITSTATUS(status) == kExitSuccess;
 }
 
Index: dev/base/allocator/partition_allocator/starscan/state_bitmap.h
===================================================================
--- dev.orig/base/allocator/partition_allocator/starscan/state_bitmap.h
+++ dev/base/allocator/partition_allocator/starscan/state_bitmap.h
@@ -388,7 +388,7 @@ template <size_t PageSize, size_t PageAl
 template <typename Filter,
           typename CallbackForwarder,
           typename Callback,
-          bool Clear>
+          bool ClearBool>
 inline void
 StateBitmap<PageSize, PageAlignment, AllocationAlignment>::IterateImpl(
     size_t epoch,
@@ -418,7 +418,7 @@ StateBitmap<PageSize, PageAlignment, All
 
       callback_forwarder(callback, object_address, bits);
 
-      if (Clear) {
+      if (ClearBool) {
         // Clear the current bits.
         AsAtomicCell(cell_index)
             .fetch_and(clear_value_mask, std::memory_order_relaxed);
Index: dev/base/allocator/partition_allocator/partition_root.h
===================================================================
--- dev.orig/base/allocator/partition_allocator/partition_root.h
+++ dev/base/allocator/partition_allocator/partition_root.h
@@ -169,7 +169,7 @@ struct PartitionOptions {
 // Never instantiate a PartitionRoot directly, instead use
 // PartitionAllocator.
 template <bool thread_safe>
-struct alignas(64) BASE_EXPORT PartitionRoot {
+struct BASE_EXPORT alignas(64) PartitionRoot {
   using SlotSpan = internal::SlotSpanMetadata<thread_safe>;
   using Page = internal::PartitionPage<thread_safe>;
   using Bucket = internal::PartitionBucket<thread_safe>;
Index: dev/base/sequence_checker_impl.h
===================================================================
--- dev.orig/base/sequence_checker_impl.h
+++ dev/base/sequence_checker_impl.h
@@ -24,7 +24,7 @@ class StackTrace;
 // version for your build configuration.
 // Note: This is marked with "context" capability in order to support
 // thread_annotations.h.
-class THREAD_ANNOTATION_ATTRIBUTE__(capability("context"))
+class
     BASE_EXPORT SequenceCheckerImpl {
  public:
   static void EnableStackLogging();
